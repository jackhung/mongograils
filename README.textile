<h1>MongoDB Grails Plugin</h1>

<h2>Features</h2>
* Simple Domain class with dynamic properties (no document schema necessary),
** Add any fields any time
* Power of <code>com.mongodb.QueryBuilder</code>
* Easy Atomic operations 
* Can link documents with <code>DBRef</code>

<h2>Quickstart</h2>
<h3>1. Download the plugin</h3>
Down load <a href="http://github.com/jackhung/mongograils/downloads">grails-mongograils-0.1.zip</a>

<h3>2. Create a Grails project</h3>
<code>grails create-app mongograils-sample</code>

<h3>3. Install the plugin</h3>
<code>grails install-plugin /tmp/mongograils/grails-mongograils-0.1.zip</code>

<h3>4. Create the Book domain, controller and list-view</h3>
<code> vim grails-app/domain/Book.groovy </code> and copy from <a href="http://gist.github.com/403668">here</a>
<script src="http://gist.github.com/403668.js?file=Book.groovy"></script>
<code> vim grails-app/controllers/BookController.groovy </code> and copy from <a href="http://gist.github.com/403674">here</a>
<script src="http://gist.github.com/403674.js?file=BookController.groovy"></script>
<code> mkdir grails-app/views/book </code>
<code> vim grails-app/views/list.gsp </code> and copy from <a href="http://gist.github.com/403675">here</a>
<script src="http://gist.github.com/403675.js?file=view.gsp"></script>

<h3>5. Create some sample data in BootStrap.groovy</h3>
<code>vim grails-app/conf/BootStrap.groovy</code> and replace content from <a href="http://gist.github.com/403671">here</a>
<script src="http://gist.github.com/403671.js?file=BootStrap.groovy"></script>

<h3> 6. Run and test </h3>
* Make sure mongodb is up and running.
* Then start the application <code>grails run-app</code>
* Now point your browser to <code>http://localhost:8080/mongograils-sample</code> (<b>NOTE: Only the list action/view is currently usable</b>)
* You can also get the Book-list as JSON: <code>http://localhost:8080/mongograils-sample/book/list.json</code> or as XML : <code>http://localhost:8080/mongograils-sample/book/list.xml</code>

<h2>Domain Class</h2>

<h3>Annotations</h3>
You need to annotated your Domain Class with two annotations:
<pre>
import grails.plugin.mongo.MongoCollection
import grails.plugin.mongo.MongoTypeName

@MongoCollection("users")
@MongoTypeName("user")
class User {
}
</pre>

When persists to MongoDB, a field name <code>_t</code> is added and set to the value defined by <code>@MongoTypeName</code>. 
This is used by the <code>BasicDBObject.toDomain()</code> to determine the Domain Class.

The value of <code>@MongoCollection</code> specifies the MongoDB Collection to use for storing instances of the entity.

<h3>Domain MongoDB methods</h3>

Please find examples of using the mongo plugin API in the project's <a href="http://github.com/jackhung/mongograils/tree/master/test/">unit/integration tests</a>.

Static methods:
* mongoFind
** <code>User.mongoFind()</code>
** <code>User.mongoFind(username: "Jack", "address.state": "CA")</code> with arbitrary conditions
** <code>User.mongoFind([username: "Jack", "address.state": "CA"], [profile: 1])</code> return only profile field
** <code>User.mongoFind { where("username").is("Jack") } // use MyQueryBuilder</code>
** <code>User.mongoFind { where("username").regex("Jack.*") }</code>
** <code>User.mongoFind(profile: 1) { where("username").regex("Jack.*") }</code> return only profile field
** <code>User.mongoFind().skip(10).limit(10).sort([username: 1])</code>
* mongoFindOne
** Similar to <code>mongoFInd()</code> supporting QueryBuilder
** mongoQuery

Instance methods:
* mongoInsert
* mongoRemove
* <code>mongoPerform()</code>: to support atomic modification to a document
<pre>
        // increments balance with amount, increments txCount by 1,
        // and push an log entry to txLog list ATOMICALLY
        acct.mongoPerform {
               increment "balance", amount	
               increment "txCount"
               push "txLog", [date: new Date(), amount: amount]
        }
</pre>
* <code>toMongoDoc()</code> : converts to a <code>BasicDBObject</code>
** <code>u = User.mongoFindOne { where("username").is("Jack") }.toDomain()</code>

CRUD Events:
* beforeInsert
* beforeUpdate
* beforeDelete
* beforePerform
* afterInsert (Not yet tested)
* afterUpdate (Not yet tested)
* afterDelete (Not yet tested)
* afterPerform, might not make a lot of sense, since the modification(s) is not immediately reflected in the domain object!!
* onLoad (Not yet implemented. There is no simple way to implement this. Need to wrapped the <code>DBCursor</code> return to the caller to intercept call to <code>next()</code>). Again it might not make a lot of sense, since <code>DBCursor.next()</code> returns a BasicDBObject, not the domain object. So it is not very useful for things like computing caculated fields.

<h3>MongoDB related classes and  methods</h3>
* <code>BasicDBObject.toDomain()</code>
* <code>MyQueryBuilder</code> which extends <code>QueryBuilder</code>
** where
** exists: <code>User.mongoFind { where("mobile").exists() }
** notExists:
** between: <code>User.mongoFind { where("info.weight").between(100, 150) }</code>